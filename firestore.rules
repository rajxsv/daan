rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Rules for the 'Sliders' collection
    match /Sliders/{sliderId} {
      allow read: if true;
      allow write: if request.auth != null;
    }

    // Rules for the 'Category' collection
    match /Category/{categoryId} {
      allow read: if true;
      allow write: if request.auth != null;
    }

    // Rules for the 'UserPost' collection
    match /UserPost/{userPostId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update, delete: if request.auth.uid == resource.data.userId;
    }

    // Helper function to check if a user is part of a chat room
    // chatRoomId is expected to be in the format "uid1_uid2" where uids are sorted
    function isUserPartOfChat(chatRoomId, userId) {
      let parts = chatRoomId.split('_');
      return parts[0] == userId || parts[1] == userId;
    }

    // Rules for the 'chats' collection
    match /chats/{chatRoomId} {
      // Reads are allowed if user is part of chat for message fetching context.
      allow read: if request.auth != null && isUserPartOfChat(chatRoomId, request.auth.uid);
      
      // Allow creation of a chat room document if the user is part of the chatRoomId,
      // and the participantIds field is correctly populated and validated.
      allow create: if request.auth != null && isUserPartOfChat(chatRoomId, request.auth.uid) && request.resource.data.participantIds is list && request.resource.data.participantIds.size() == 2 && request.auth.uid in request.resource.data.participantIds;
      
      // Generally, direct updates or deletes to the chat room document itself might be disallowed
      // or restricted to specific admin roles or functions. For now, no updates/deletes.
      allow update, delete: if false;

      // Rules for the 'messages' subcollection within each chat room
      match /messages/{messageId} {
        // Allow read and list (get, list) if the user is authenticated, the chat room exists,
        // and the user's UID is in the participantIds array of the chat room.
        allow get, list: if request.auth != null && isUserPartOfChat(chatRoomId, request.auth.uid);

        // Allow create (write) if the user is authenticated, part of the chat room,
        // the senderId matches the user's UID, and the message structure is valid.
        allow create: if request.auth != null && isUserPartOfChat(chatRoomId, request.auth.uid) && request.resource.data.senderId == request.auth.uid && request.resource.data.text is string && request.resource.data.text.size() > 0 && request.resource.data.createdAt == request.time;

        // Disallow update and delete of messages for now
        allow update, delete: if false;
      }
    }
  }
}
